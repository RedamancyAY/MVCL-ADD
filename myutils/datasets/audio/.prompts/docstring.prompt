# This is an example ".prompt" file
# It is used to define and reuse prompts within Continue
# Continue will automatically create a slash command for each prompt in the .prompts folder
# To learn more, see the full .prompt file reference: https://docs.continue.dev/features/prompt-files
temperature: 0.0
---
{{{ input }}}


Please add a Google-style docstring to the above selected Python function, including descriptions for arguments, return values, any exceptions raised, and usage examples. Additionally, insert inline comments to explain key logic or complex steps in the code.


The following are two Expected Docstring, Comments, and Usage Examples. The example is surrounded in backticks, but your response should not be:
```python
def calculate_circle_area(radius):
    """Calculates the area of a circle given its radius.
    
    Args:
        radius (float): The radius of the circle. Must be a non-negative number.
        
    Returns:
        float: The area of the circle.
        
    Raises:
        ValueError: If the radius is negative.
        
    Example:
        >>calculate_circle_area(5)
        78.53975
        
        >>calculate_circle_area(0)
        0.0
        
        >>calculate_circle_area(-1)
        Traceback (most recent call last):
            ...
        ValueError: Radius cannot be negative.
    """
    
    # Validate the radius is non-negative
    if radius < 0:
        raise ValueError("Radius cannot be negative.")
    
    # Calculate the area using the formula Ï€ * r^2
    result = 3.14159 * radius ** 2
    return result

def fetch_data(api_url, timeout=5):
    """Fetches data from the specified API endpoint.
    
    Args:
        api_url (str): The URL of the API endpoint.
        timeout (int, optional): Timeout duration for the request in seconds. Defaults to 5.
        
    Returns:
        dict: Parsed JSON data from the response if successful.
        None: If the request fails or returns a non-200 status code.
        
    Raises:
        requests.exceptions.RequestException: If the request fails due to network issues or timeout.
        
    Example:
        >>fetch_data("https://api.example.com/data")
        {'key': 'value'}
        
        >>fetch_data("https://api.example.com/data", timeout=2)
        {'key': 'value'}
        
        >>fetch_data("https://invalid.api.com")
        None
    """
    
    # Send a GET request to the API with a specified timeout
    response = requests.get(api_url, timeout=timeout)
    
    # Check if the response status is OK (200)
    if response.status_code == 200:
        return response.json()  # Parse and return JSON data
    
    # Return None if the response status is not OK
    return None
```
